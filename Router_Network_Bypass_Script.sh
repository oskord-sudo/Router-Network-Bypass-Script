#!/bin/sh

set -e  # –í—ã—Ö–æ–¥ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if [ "$(id -u)" -ne 0 ]; then
    echo "‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ root"
    exit 1
fi

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
LOG_FILE="/tmp/router_config.log"
exec > >(tee -a "$LOG_FILE") 2>&1

echo "=== –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ $(date) ==="

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤
install_package() {
    local package="$1"
    local filename="$2"
    local url="$3"
    local temp_dir="$4"
    
    if opkg list-installed | grep -q "^${package} "; then
        echo "‚úÖ $package —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 0
    fi
    
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ $package..."
    
    if ! wget -q --timeout=30 -O "$temp_dir/$filename" "$url"; then
        echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ $package"
        return 1
    fi
    
    if ! opkg install "$temp_dir/$filename"; then
        echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ $package"
        return 1
    fi
    
    echo "‚úÖ $package —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    return 0
}

install_awg_packages() {
    echo "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ AmneziaWG –ø–∞–∫–µ—Ç–æ–≤..."
    
    if ! PKGARCH=$(opkg print-architecture | awk 'BEGIN {max=0} {if ($3 > max) {max = $3; arch = $2}} END {print arch}'); then
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø–∞–∫–µ—Ç–æ–≤"
        return 1
    fi
    
    local TARGET=$(ubus call system board | jsonfilter -e '@.release.target' | cut -d '/' -f 1)
    local SUBTARGET=$(ubus call system board | jsonfilter -e '@.release.target' | cut -d '/' -f 2)
    local VERSION=$(ubus call system board | jsonfilter -e '@.release.version')
    
    [ -z "$VERSION" ] && { echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é"; return 1; }
    
    local PKGPOSTFIX="_v${VERSION}_${PKGARCH}_${TARGET}_${SUBTARGET}.ipk"
    local BASE_URL="https://github.com/Slava-Shchipunov/awg-openwrt/releases/download/"
    local AWG_DIR="/tmp/amneziawg"
    
    mkdir -p "$AWG_DIR"
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    install_package "kmod-amneziawg" "kmod-amneziawg${PKGPOSTFIX}" "${BASE_URL}v${VERSION}/kmod-amneziawg${PKGPOSTFIX}" "$AWG_DIR" || return 1
    install_package "amneziawg-tools" "amneziawg-tools${PKGPOSTFIX}" "${BASE_URL}v${VERSION}/amneziawg-tools${PKGPOSTFIX}" "$AWG_DIR" || return 1
    install_package "luci-app-amneziawg" "luci-app-amneziawg${PKGPOSTFIX}" "${BASE_URL}v${VERSION}/luci-app-amneziawg${PKGPOSTFIX}" "$AWG_DIR" || return 1
    
    rm -rf "$AWG_DIR"
    echo "‚úÖ AmneziaWG –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
}

manage_package() {
    local name="$1"
    local autostart="$2"
    local process="$3"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–∞–∫–µ—Ç
    if opkg list-installed | grep -q "^$name "; then
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
        if /etc/init.d/"$name" enabled; then
            if [ "$autostart" = "disable" ]; then
                /etc/init.d/"$name" disable
                echo "‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ $name –æ—Ç–∫–ª—é—á–µ–Ω"
            fi
        else
            if [ "$autostart" = "enable" ]; then
                /etc/init.d/"$name" enable
                echo "‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ $name –≤–∫–ª—é—á–µ–Ω"
            fi
        fi

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
        if pgrep -f "$name" > /dev/null; then
            if [ "$process" = "stop" ]; then
                /etc/init.d/"$name" stop
                echo "‚úÖ –°–µ—Ä–≤–∏—Å $name –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            fi
        else
            if [ "$process" = "start" ]; then
                /etc/init.d/"$name" start
                echo "‚úÖ –°–µ—Ä–≤–∏—Å $name –∑–∞–ø—É—â–µ–Ω"
            fi
        fi
    else
        echo "‚ö†Ô∏è –ü–∞–∫–µ—Ç $name –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

checkPackageAndInstall() {
    local name="$1"
    local isRequired="${2:-0}"
    local alt=""

    if [ "$name" = "https-dns-proxy" ]; then
        alt="luci-app-doh-proxy"
    fi

    if [ -n "$alt" ]; then
        if opkg list-installed | grep -qE "^($name|$alt) "; then
            echo "‚úÖ $name –∏–ª–∏ $alt —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            return 0
        fi
    else
        if opkg list-installed | grep -q "^$name "; then
            echo "‚úÖ $name —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            return 0
        fi
    fi

    echo "üì¶ $name –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ $name..."
    if opkg install "$name"; then
        echo "‚úÖ $name —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        return 0
    else
        echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ $name"
        if [ "$isRequired" = "1" ]; then
            echo "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ $name –≤—Ä—É—á–Ω—É—é$( [ -n "$alt" ] && echo " –∏–ª–∏ $alt") –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞."
            exit 1
        fi
        return 1
    fi
}

checkAndAddDomainPermanentName() {
    local name="$1"
    local ip="$2"
    local nameRule="option name '$name'"
    
    if ! uci show dhcp | grep -q "$nameRule"; then 
        uci add dhcp domain
        uci set "dhcp.@domain[-1].name=$name"
        uci set "dhcp.@domain[-1].ip=$ip"
        uci commit dhcp
        echo "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –¥–æ–º–µ–Ω: $name -> $ip"
    else
        echo "‚úÖ –î–æ–º–µ–Ω $name —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

byPassGeoBlockComssDNS() {
    echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ dhcp –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫..."

    uci set dhcp.cfg01411c.strictorder='1'
    uci set dhcp.cfg01411c.filter_aaaa='1'
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    while uci delete dhcp.cfg01411c.server 2>/dev/null; do :; done
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    uci add_list dhcp.cfg01411c.server='127.0.0.1#5053'
    uci add_list dhcp.cfg01411c.server='127.0.0.1#5054'
    uci add_list dhcp.cfg01411c.server='127.0.0.1#5055'
    uci add_list dhcp.cfg01411c.server='127.0.0.1#5056'
    uci add_list dhcp.cfg01411c.server='/*.chatgpt.com/127.0.0.1#5056'
    uci add_list dhcp.cfg01411c.server='/*.oaistatic.com/127.0.0.1#5056'
    uci add_list dhcp.cfg01411c.server='/*.oaiusercontent.com/127.0.0.1#5056'
    uci add_list dhcp.cfg01411c.server='/*.openai.com/127.0.0.1#5056'
    uci add_list dhcp.cfg01411c.server='/*.microsoft.com/127.0.0.1#5056'
    
    uci commit dhcp

    echo "üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ChatGPT..."

    checkAndAddDomainPermanentName "chatgpt.com" "83.220.169.155"
    checkAndAddDomainPermanentName "openai.com" "83.220.169.155"
    checkAndAddDomainPermanentName "webrtc.chatgpt.com" "83.220.169.155"
    checkAndAddDomainPermanentName "ios.chat.openai.com" "83.220.169.155"
    checkAndAddDomainPermanentName "searchgpt.com" "83.220.169.155"

    if service dnsmasq restart && service odhcpd restart; then
        echo "‚úÖ DNS —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    else
        echo "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ DNS —Å–µ—Ä–≤–∏—Å–æ–≤"
        return 1
    fi
}

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
create_backup() {
    local DIR="/etc/config"
    local DIR_BACKUP="/root/backup5"
    local config_files="network firewall doh-proxy zapret dhcp dns-failsafe-proxy"
    
    if [ ! -d "$DIR_BACKUP" ]; then
        echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
        if ! mkdir -p "$DIR_BACKUP"; then
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–∞"
            return 1
        fi
        
        for file in $config_files; do
            if [ -f "$DIR/$file" ]; then
                if ! cp -f "$DIR/$file" "$DIR_BACKUP/$file"; then
                    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ç–∫–∞–ø–µ $file"
                    return 1
                fi
                echo "‚úÖ –ë—ç–∫–∞–ø $file —Å–æ–∑–¥–∞–Ω"
            else
                echo "‚ö†Ô∏è –§–∞–π–ª $DIR/$file –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
            fi
        done
        echo "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ $DIR_BACKUP"
    else
        echo "‚úÖ –ë—ç–∫–∞–ø —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
check_service_health() {
    local service="$1"
    local test_url="$2"
    
    if ! service "$service" status > /dev/null 2>&1; then
        echo "‚ùå –°–µ—Ä–≤–∏—Å $service –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        return 1
    fi
    
    if [ -n "$test_url" ]; then
        if ! curl --max-time 10 -s -o /dev/null "$test_url"; then
            echo "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å $service –∑–∞–ø—É—â–µ–Ω, –Ω–æ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
            return 2
        fi
    fi
    
    echo "‚úÖ –°–µ—Ä–≤–∏—Å $service —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
    return 0
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    local is_manual_input_parameters="${1:-n}"
    local is_reconfig_podkop="${2:-y}"
    
    echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OpenWRT —Ä–æ—É—Ç–µ—Ä–∞..."
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
    echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤..."
    if ! opkg update; then
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤"
        exit 1
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    local required_packages="coreutils-base64 jq curl unzip"
    for pkg in $required_packages; do
        checkPackageAndInstall "$pkg" "1" || exit 1
    done
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ AmneziaWG
    if ! install_awg_packages; then
        echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ AmneziaWG –ø–∞–∫–µ—Ç–æ–≤"
        exit 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ sing-box
    local findVersion="1.12.0"
    local INSTALLED_SINGBOX_VERSION
    INSTALLED_SINGBOX_VERSION=$(opkg list-installed | grep "^sing-box " | cut -d ' ' -f 3)
    
    if [ -n "$INSTALLED_SINGBOX_VERSION" ] && [ "$(printf '%s\n%s\n' "$findVersion" "$INSTALLED_SINGBOX_VERSION" | sort -V | tail -n1)" = "$INSTALLED_SINGBOX_VERSION" ]; then
        echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è sing-box $INSTALLED_SINGBOX_VERSION —Å–æ–≤–º–µ—Å—Ç–∏–º–∞"
    else
        echo "üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è sing-box —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∫–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ sing-box..."
        manage_package "podkop" "enable" "stop"
        opkg remove --force-removal-of-dependent-packages "sing-box" 2>/dev/null || true
        checkPackageAndInstall "sing-box" "1" || exit 1
    fi
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
    echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤..."
    opkg upgrade amneziawg-tools 2>/dev/null || true
    opkg upgrade kmod-amneziawg 2>/dev/null || true
    opkg upgrade luci-app-amneziawg 2>/dev/null || true
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ dnsmasq-full
    if opkg list-installed | grep -q "dnsmasq-full "; then
        echo "‚úÖ dnsmasq-full —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ dnsmasq-full..."
        if cd /tmp/ && opkg download dnsmasq-full; then
            if opkg remove dnsmasq && opkg install dnsmasq-full --cache /tmp/; then
                echo "‚úÖ dnsmasq-full —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            else
                echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ dnsmasq-full"
                exit 1
            fi
        else
            echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ dnsmasq-full"
            exit 1
        fi
    fi
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ dnsmasq
    echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ dnsmasq..."
    uci set dhcp.@dnsmasq[0].confdir='/tmp/dnsmasq.d'
    uci commit dhcp
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
    create_backup || exit 1
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    checkPackageAndInstall "luci-app-dns-failsafe-proxy" "0"
    checkPackageAndInstall "opera-proxy" "0"
    checkPackageAndInstall "zapret" "0"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    local URL="https://raw.githubusercontent.com/routerich/RouterichAX3000_configs/refs/heads/new_awg_podkop"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DHCP
    echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DHCP..."
    uci set dhcp.cfg01411c.strictorder='1'
    uci set dhcp.cfg01411c.filter_aaaa='1'
    uci commit dhcp
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ sing-box
    echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ sing-box..."
    cat <<'EOF' > /etc/sing-box/config.json
{
    "log": {
    "disabled": true,
    "level": "error"
},
"inbounds": [
    {
    "type": "tproxy",
    "listen": "::",
    "listen_port": 1100,
    "sniff": false
    }
],
"outbounds": [
    {
    "type": "http",
    "server": "127.0.0.1",
    "server_port": 18080
    }
],
"route": {
    "auto_detect_interface": true
}
}
EOF

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ sing-box –≤ UCI
    uci set sing-box.main.enabled='1'
    uci set sing-box.main.user='root'
    uci add_list sing-box.main.ifaces='wan'
    uci add_list sing-box.main.ifaces='wan6'
    uci commit sing-box
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª firewall
    local nameRule="option name 'Block_UDP_443'"
    if ! uci show firewall | grep -q "$nameRule"; then
        echo "üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ QUIC..."
        
        uci add firewall rule
        uci set firewall.@rule[-1].name='Block_UDP_80'
        uci add_list firewall.@rule[-1].proto='udp'
        uci set firewall.@rule[-1].src='lan'
        uci set firewall.@rule[-1].dest='wan'
        uci set firewall.@rule[-1].dest_port='80'
        uci set firewall.@rule[-1].target='REJECT'
        
        uci add firewall rule
        uci set firewall.@rule[-1].name='Block_UDP_443'
        uci add_list firewall.@rule[-1].proto='udp'
        uci set firewall.@rule[-1].src='lan'
        uci set firewall.@rule[-1].dest='wan'
        uci set firewall.@rule[-1].dest_port='443'
        uci set firewall.@rule[-1].target='REJECT'
        
        uci commit firewall
        echo "‚úÖ –ü—Ä–∞–≤–∏–ª–∞ firewall –¥–æ–±–∞–≤–ª–µ–Ω—ã"
    else
        echo "‚úÖ –ü—Ä–∞–≤–∏–ª–∞ firewall —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
    fi
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ö–æ–¥–∞ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ö–æ–¥–∞ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫..."
    if byPassGeoBlockComssDNS; then
        echo "‚úÖ –û–±—Ö–æ–¥ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    else
        echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –æ–±—Ö–æ–¥–∞ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"
    fi
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    echo "üîß –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    manage_package "sing-box" "enable" "start"
    manage_package "opera-proxy" "enable" "start"
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    echo "üîç –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏..."
    check_service_health "sing-box"
    check_service_health "opera-proxy"
    
    echo ""
    echo "üéâ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    echo "üìã –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $LOG_FILE"
    echo "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'echo "‚ùå –°–∫—Ä–∏–ø—Ç –ø—Ä–µ—Ä–≤–∞–Ω"; exit 1' INT TERM

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
