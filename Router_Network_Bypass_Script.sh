#!/bin/sh

set -e

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if [ "$(id -u)" -ne 0 ]; then
    echo "‚ùå –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –ø—Ä–∞–≤–∞–º–∏ root"
    exit 1
fi

LOG_FILE="/tmp/router_config_$(date +%Y%m%d_%H%M%S).log"
exec > >(tee -a "$LOG_FILE") 2>&1
exec 2>&1

echo "=== –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ $(date) ==="

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ AmneziaWG —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
install_awg_packages() {
    echo "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ AmneziaWG —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç..."
    
    local install_url="https://raw.githubusercontent.com/Slava-Shchipunov/awg-openwrt/refs/heads/master/amneziawg-install.sh"
    local temp_script="/tmp/amneziawg-install.sh"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    echo "üì° –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–∫—Ä–∏–ø—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
    if ! wget --spider "$install_url" 2>/dev/null; then
        echo "‚ùå –°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        return 1
    fi
    
    echo "‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–µ–Ω"
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
    echo "‚¨áÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
    if ! wget -O "$temp_script" "$install_url"; then
        echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
    if [ ! -s "$temp_script" ]; then
        echo "‚ùå –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –ø—É—Å—Ç"
        rm -f "$temp_script"
        return 1
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —ç—Ç–æ bash —Å–∫—Ä–∏–ø—Ç (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    if ! head -n 5 "$temp_script" | grep -q "bash\|sh"; then
        echo "‚ö†Ô∏è  –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å —Å–∫—Ä–∏–ø—Ç–æ–º"
    fi
    
    echo "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ AmneziaWG..."
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
    if sh "$temp_script"; then
        echo "‚úÖ AmneziaWG —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç"
        rm -f "$temp_script"
        return 0
    else
        echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ AmneziaWG —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç"
        rm -f "$temp_script"
        return 1
    fi
}

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –µ—Å–ª–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
install_awg_alternative() {
    echo "üîß –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ AmneziaWG..."
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
    local PKGARCH
    if ! PKGARCH=$(opkg print-architecture | awk 'BEGIN {max=0} {if ($3 > max) {max = $3; arch = $2}} END {print arch}'); then
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø–∞–∫–µ—Ç–æ–≤"
        return 1
    fi
    
    local TARGET
    TARGET=$(ubus call system board | jsonfilter -e '@.release.target' | cut -d '/' -f 1)
    local SUBTARGET
    SUBTARGET=$(ubus call system board | jsonfilter -e '@.release.target' | cut -d '/' -f 2)
    local VERSION
    VERSION=$(ubus call system board | jsonfilter -e '@.release.version')
    
    if [ -z "$VERSION" ]; then
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–µ—Ä—Å–∏—é OpenWRT"
        return 1
    fi
    
    local PKGPOSTFIX="_v${VERSION}_${PKGARCH}_${TARGET}_${SUBTARGET}.ipk"
    local BASE_URL="https://github.com/Slava-Shchipunov/awg-openwrt/releases/download/v${VERSION}/"
    local AWG_DIR="/tmp/amneziawg"
    
    if ! mkdir -p "$AWG_DIR"; then
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"
        return 1
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ (–±–µ–∑ –º–∞—Å—Å–∏–≤–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å busybox)
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ kmod-amneziawg..."
    local kmod_filename="kmod-amneziawg${PKGPOSTFIX}"
    local kmod_url="${BASE_URL}${kmod_filename}"
    
    if wget -O "${AWG_DIR}/${kmod_filename}" "$kmod_url"; then
        if opkg install "${AWG_DIR}/${kmod_filename}"; then
            echo "‚úÖ kmod-amneziawg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        else
            echo "‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ kmod-amneziawg, –ø—Ä–æ–±—É–µ–º —Å --force-overwrite"
            opkg install --force-overwrite "${AWG_DIR}/${kmod_filename}" || echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å kmod-amneziawg"
        fi
    else
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å kmod-amneziawg"
    fi
    
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ amneziawg-tools..."
    local tools_filename="amneziawg-tools${PKGPOSTFIX}"
    local tools_url="${BASE_URL}${tools_filename}"
    
    if wget -O "${AWG_DIR}/${tools_filename}" "$tools_url"; then
        if opkg install "${AWG_DIR}/${tools_filename}"; then
            echo "‚úÖ amneziawg-tools —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        else
            echo "‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ amneziawg-tools, –ø—Ä–æ–±—É–µ–º —Å --force-overwrite"
            opkg install --force-overwrite "${AWG_DIR}/${tools_filename}" || echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å amneziawg-tools"
        fi
    else
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å amneziawg-tools"
    fi
    
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ luci-app-amneziawg..."
    local luci_filename="luci-app-amneziawg${PKGPOSTFIX}"
    local luci_url="${BASE_URL}${luci_filename}"
    
    if wget -O "${AWG_DIR}/${luci_filename}" "$luci_url"; then
        if opkg install "${AWG_DIR}/${luci_filename}"; then
            echo "‚úÖ luci-app-amneziawg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        else
            echo "‚ö†Ô∏è –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ luci-app-amneziawg, –ø—Ä–æ–±—É–µ–º —Å --force-overwrite"
            opkg install --force-overwrite "${AWG_DIR}/${luci_filename}" || echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å luci-app-amneziawg"
        fi
    else
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å luci-app-amneziawg"
    fi
    
    rm -rf "$AWG_DIR"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ AmneziaWG:"
    for pkg in kmod-amneziawg amneziawg-tools luci-app-amneziawg; do
        if opkg list-installed | grep -q "^$pkg "; then
            echo "   ‚úÖ $pkg: —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        else
            echo "   ‚ùå $pkg: –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        fi
    done
    
    return 0
}

manage_package() {
    local name="$1"
    local autostart="$2"
    local process="$3"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–∞–∫–µ—Ç
    if opkg list-installed | grep -q "^${name} "; then
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω –ª–∏ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫
        if /etc/init.d/"$name" enabled > /dev/null 2>&1; then
            if [ "$autostart" = "disable" ]; then
                if /etc/init.d/"$name" disable; then
                    echo "‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ $name –æ—Ç–∫–ª—é—á–µ–Ω"
                else
                    echo "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ $name"
                fi
            fi
        else
            if [ "$autostart" = "enable" ]; then
                if /etc/init.d/"$name" enable; then
                    echo "‚úÖ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ $name –≤–∫–ª—é—á–µ–Ω"
                else
                    echo "‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ $name"
                fi
            fi
        fi

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
        if pgrep -f "$name" > /dev/null 2>&1; then
            if [ "$process" = "stop" ]; then
                if /etc/init.d/"$name" stop; then
                    echo "‚úÖ –°–µ—Ä–≤–∏—Å $name –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                else
                    echo "‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ $name"
                fi
            fi
        else
            if [ "$process" = "start" ]; then
                if /etc/init.d/"$name" start; then
                    echo "‚úÖ –°–µ—Ä–≤–∏—Å $name –∑–∞–ø—É—â–µ–Ω"
                else
                    echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ $name"
                fi
            fi
        fi
    else
        echo "‚ö†Ô∏è –ü–∞–∫–µ—Ç $name –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    fi
}

checkPackageAndInstall() {
    local name="$1"
    local isRequired="${2:-0}"
    local alt=""

    if [ "$name" = "https-dns-proxy" ]; then
        alt="luci-app-doh-proxy"
    fi

    local installed=0
    if [ -n "$alt" ]; then
        if opkg list-installed | grep -q "^${name} " || opkg list-installed | grep -q "^${alt} "; then
            installed=1
        fi
    else
        if opkg list-installed | grep -q "^${name} "; then
            installed=1
        fi
    fi

    if [ "$installed" -eq 1 ]; then
        echo "‚úÖ $name —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return 0
    fi

    echo "üì¶ $name –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ $name..."
    if opkg install "$name"; then
        echo "‚úÖ $name —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        return 0
    else
        echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ $name"
        if [ "$isRequired" = "1" ]; then
            if [ -n "$alt" ]; then
                echo "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ $name –∏–ª–∏ $alt –≤—Ä—É—á–Ω—É—é –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞."
            else
                echo "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ $name –≤—Ä—É—á–Ω—É—é –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞."
            fi
            exit 1
        fi
        return 1
    fi
}

checkAndAddDomainPermanentName() {
    local name="$1"
    local ip="$2"
    local nameRule="option name '${name}'"
    
    if ! uci show dhcp | grep -qF "$nameRule"; then 
        uci add dhcp domain
        uci set "dhcp.@domain[-1].name=${name}"
        uci set "dhcp.@domain[-1].ip=${ip}"
        echo "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –¥–æ–º–µ–Ω: $name -> $ip"
    else
        echo "‚úÖ –î–æ–º–µ–Ω $name —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

byPassGeoBlockComssDNS() {
    echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ dhcp –¥–ª—è –æ–±—Ö–æ–¥–∞ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫..."

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è UCI
    uci batch << EOF
set dhcp.cfg01411c.strictorder='1'
set dhcp.cfg01411c.filter_aaaa='1'
EOF

    # –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    while uci delete dhcp.cfg01411c.server 2>/dev/null; do :; done
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
    uci add_list dhcp.cfg01411c.server='127.0.0.1#5053'
    uci add_list dhcp.cfg01411c.server='127.0.0.1#5054'
    uci add_list dhcp.cfg01411c.server='127.0.0.1#5055'
    uci add_list dhcp.cfg01411c.server='127.0.0.1#5056'
    uci add_list dhcp.cfg01411c.server='/*.chatgpt.com/127.0.0.1#5056'
    uci add_list dhcp.cfg01411c.server='/*.openai.com/127.0.0.1#5056'
    
    uci commit dhcp

    echo "üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ ChatGPT..."

    checkAndAddDomainPermanentName "chatgpt.com" "83.220.169.155"
    checkAndAddDomainPermanentName "openai.com" "83.220.169.155"

    if service dnsmasq restart && service odhcpd restart; then
        echo "‚úÖ DNS —Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
        return 0
    else
        echo "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ DNS —Å–µ—Ä–≤–∏—Å–æ–≤"
        return 1
    fi
}

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
create_backup() {
    local DIR="/etc/config"
    local DIR_BACKUP="/root/backup_openwrt_$(date +%Y%m%d_%H%M%S)"
    local config_files="network firewall doh-proxy zapret dhcp dns-failsafe-proxy"
    
    if [ ! -d "$DIR_BACKUP" ]; then
        echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
        if ! mkdir -p "$DIR_BACKUP"; then
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±—ç–∫–∞–ø–∞"
            return 1
        fi
        
        for file in $config_files; do
            if [ -f "${DIR}/${file}" ]; then
                if cp -f "${DIR}/${file}" "${DIR_BACKUP}/${file}"; then
                    echo "‚úÖ –ë—ç–∫–∞–ø $file —Å–æ–∑–¥–∞–Ω"
                else
                    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±—ç–∫–∞–ø–µ $file"
                    return 1
                fi
            else
                echo "‚ö†Ô∏è –§–∞–π–ª ${DIR}/${file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º"
            fi
        done
        echo "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ $DIR_BACKUP"
        return 0
    else
        echo "‚úÖ –ë—ç–∫–∞–ø —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        return 0
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
check_service_health() {
    local service="$1"
    local test_url="${2:-}"
    
    if ! service "$service" status > /dev/null 2>&1; then
        echo "‚ùå –°–µ—Ä–≤–∏—Å $service –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        return 1
    fi
    
    if [ -n "$test_url" ]; then
        if curl --max-time 10 -s -o /dev/null "$test_url"; then
            echo "‚úÖ –°–µ—Ä–≤–∏—Å $service —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
            return 0
        else
            echo "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å $service –∑–∞–ø—É—â–µ–Ω, –Ω–æ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω"
            return 2
        fi
    else
        echo "‚úÖ –°–µ—Ä–≤–∏—Å $service –∑–∞–ø—É—â–µ–Ω"
        return 0
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
check_internet_connection() {
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è..."
    if ping -c 2 -W 5 8.8.8.8 > /dev/null 2>&1; then
        echo "‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ"
        return 0
    else
        echo "‚ùå –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
        return 1
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    local is_manual_input_parameters="${1:-n}"
    local is_reconfig_podkop="${2:-y}"
    
    echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ OpenWRT —Ä–æ—É—Ç–µ—Ä–∞..."
    echo "üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤: $LOG_FILE"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
    if ! check_internet_connection; then
        echo "‚ö†Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞..."
    fi
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
    echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤..."
    if opkg update; then
        echo "‚úÖ –°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω"
    else
        echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤"
        exit 1
    fi
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    local required_packages="coreutils-base64 jq curl unzip"
    for pkg in $required_packages; do
        if ! checkPackageAndInstall "$pkg" "1"; then
            exit 1
        fi
    done
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ AmneziaWG —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
    if ! install_awg_packages; then
        echo "‚ö†Ô∏è –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª"
        echo "üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
        if ! install_awg_alternative; then
            echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AmneziaWG"
            echo "üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ AmneziaWG –≤—Ä—É—á–Ω—É—é:"
            echo "   wget -O /tmp/install.sh https://raw.githubusercontent.com/Slava-Shchipunov/awg-openwrt/master/amneziawg-install.sh"
            echo "   sh /tmp/install.sh"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ sing-box
    local findVersion="1.12.0"
    local INSTALLED_SINGBOX_VERSION
    INSTALLED_SINGBOX_VERSION=$(opkg list-installed | grep "^sing-box " | awk '{print $3}')
    
    if [ -n "$INSTALLED_SINGBOX_VERSION" ]; then
        if [ "$(printf '%s\n%s\n' "$findVersion" "$INSTALLED_SINGBOX_VERSION" | sort -V | tail -n1)" = "$INSTALLED_SINGBOX_VERSION" ]; then
            echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è sing-box $INSTALLED_SINGBOX_VERSION —Å–æ–≤–º–µ—Å—Ç–∏–º–∞"
        else
            echo "üîÑ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è sing-box —É—Å—Ç–∞—Ä–µ–ª–∞. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ..."
            manage_package "podkop" "enable" "stop"
            opkg remove --force-removal-of-dependent-packages "sing-box" 2>/dev/null || true
            checkPackageAndInstall "sing-box" "1" || exit 1
        fi
    else
        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ sing-box..."
        checkPackageAndInstall "sing-box" "1" || exit 1
    fi
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
    echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤..."
    for pkg in amneziawg-tools kmod-amneziawg luci-app-amneziawg; do
        if opkg list-installed | grep -q "^${pkg} "; then
            if opkg upgrade "$pkg"; then
                echo "‚úÖ $pkg –æ–±–Ω–æ–≤–ª–µ–Ω"
            else
                echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å $pkg"
            fi
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ dnsmasq-full
    if opkg list-installed | grep -q "dnsmasq-full "; then
        echo "‚úÖ dnsmasq-full —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    else
        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ dnsmasq-full..."
        if cd /tmp/ && opkg download dnsmasq-full; then
            if opkg remove dnsmasq && opkg install dnsmasq-full --cache /tmp/; then
                echo "‚úÖ dnsmasq-full —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            else
                echo "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ dnsmasq-full"
                exit 1
            fi
        else
            echo "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ dnsmasq-full"
            exit 1
        fi
    fi
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ dnsmasq
    echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ dnsmasq..."
    uci set dhcp.@dnsmasq[0].confdir='/tmp/dnsmasq.d'
    uci commit dhcp
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
    if ! create_backup; then
        echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞"
        exit 1
    fi
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    local optional_packages="luci-app-dns-failsafe-proxy opera-proxy zapret"
    for pkg in $optional_packages; do
        checkPackageAndInstall "$pkg" "0"
    done
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DHCP
    echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ DHCP..."
    uci set dhcp.cfg01411c.strictorder='1'
    uci set dhcp.cfg01411c.filter_aaaa='1'
    uci commit dhcp
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ sing-box
    echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ sing-box..."
    cat << 'EOF' > /etc/sing-box/config.json
{
    "log": {
        "disabled": true,
        "level": "error"
    },
    "inbounds": [
        {
            "type": "tproxy",
            "listen": "::",
            "listen_port": 1100,
            "sniff": false
        }
    ],
    "outbounds": [
        {
            "type": "http",
            "server": "127.0.0.1",
            "server_port": 18080
        }
    ],
    "route": {
        "auto_detect_interface": true
    }
}
EOF

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ sing-box –≤ UCI
    uci set sing-box.main.enabled='1'
    uci set sing-box.main.user='root'
    uci add_list sing-box.main.ifaces='wan'
    uci add_list sing-box.main.ifaces='wan6'
    uci commit sing-box
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª firewall
    if ! uci show firewall | grep -q "Block_UDP_443"; then
        echo "üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ QUIC..."
        
        uci batch << 'EOF'
add firewall rule
set firewall.@rule[-1].name='Block_UDP_80'
add_list firewall.@rule[-1].proto='udp'
set firewall.@rule[-1].src='lan'
set firewall.@rule[-1].dest='wan'
set firewall.@rule[-1].dest_port='80'
set firewall.@rule[-1].target='REJECT'
add firewall rule
set firewall.@rule[-1].name='Block_UDP_443'
add_list firewall.@rule[-1].proto='udp'
set firewall.@rule[-1].src='lan'
set firewall.@rule[-1].dest='wan'
set firewall.@rule[-1].dest_port='443'
set firewall.@rule[-1].target='REJECT'
EOF
        uci commit firewall
        echo "‚úÖ –ü—Ä–∞–≤–∏–ª–∞ firewall –¥–æ–±–∞–≤–ª–µ–Ω—ã"
    else
        echo "‚úÖ –ü—Ä–∞–≤–∏–ª–∞ firewall —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
    fi
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ö–æ–¥–∞ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
    echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ö–æ–¥–∞ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫..."
    if byPassGeoBlockComssDNS; then
        echo "‚úÖ –û–±—Ö–æ–¥ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ"
    else
        echo "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –æ–±—Ö–æ–¥–∞ –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–æ–∫"
    fi
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    echo "üîß –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    manage_package "sing-box" "enable" "start"
    manage_package "opera-proxy" "enable" "start"
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    echo "üîç –§–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏..."
    check_service_health "sing-box"
    check_service_health "opera-proxy"
    
    echo ""
    echo "üéâ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
    echo "üìã –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: $LOG_FILE"
    echo "üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    
    return 0
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'echo "‚ùå –°–∫—Ä–∏–ø—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"; exit 130' INT
trap 'echo "‚ùå –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∞–≤–∞—Ä–∏–π–Ω–æ"; exit 1' TERM

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
